apiVersion: source.toolkit.fluxcd.io/v1beta2
kind: HelmRepository
metadata:
  name: elasticsearch
  namespace: elastic-system
spec:
  interval: 1h
  url: https://helm.elastic.co
---
apiVersion: helm.toolkit.fluxcd.io/v2beta2
kind: HelmRelease
metadata:
  name: elasticsearch
  namespace: elastic-system
  annotations:
    fluxcd.io/automated: "false"
spec:
  interval: 1h0m0s
  chart:
    spec:
      version: "7.17.3"
      chart: elasticsearch
      sourceRef:
        kind: HelmRepository
        name: elasticsearch
        namespace: elastic-system
  values:
    esConfig:
     elasticsearch.yml: |
      xpack.monitoring.collection.enabled: true
      xpack.monitoring.collection.interval: 60s
      xpack.watcher.enabled: true
      xpack.security.enabled: false
      xpack.security.http.ssl.enabled: false
      xpack.security.transport.ssl.enabled: false
    image: "docker.elastic.co/elasticsearch/elasticsearch"
    imageTag: "7.17.3"
    imagePullPolicy: "IfNotPresent"
    releaseName: elasticsearch
    persistence:
      enabled: true
    volumeClaimTemplate:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: "standard"
      resources:
        requests:
          storage: 10Gi
    replicas: 3
    antiAffinity: "soft"
    esJavaOpts: "-Xmx256m -Xms256m"
    resources:
      requests:
        cpu: "200m"
        memory: "0.5G"
      limits:
        memory: "1G"
    keystore: {}
    # - secretName: ""
    lifecycle:
      postStart:
        exec:
          command:
            - bash
            - -c
            - |
              #!/bin/bash
              # Create temporary ENV
              ELASTIC_HOST="localhost:9200"
              INDEX_PATTERN="logstash-*"
              # Ensure elasticsearch is spawned
              while [[ "$(curl -s -o /dev/null -w '%{http_code}\n' -L localhost:9200)" != "200" ]]; do sleep 1; done
              # Authorized to GCS
              # Create snapshot policy AKA slm
              # curl -X POST -H 'Content-Type: application/json' "localhost:9200/_nodes/reload_secure_settings?pretty"
              # curl -X PUT -H "Content-Type: application/json" -d '{ "type": "gcs", "settings": { "bucket": "logging-backups" } }' "localhost:9200/_snapshot/logging-backups"
              # curl -X PUT -H 'Content-Type: application/json' -d '{ "schedule": "0 0 0 * * ?", "name": "<daily-snapshots-{now/d}>", "repository": "logging-backups", "config": { "indices": ["logstash-*"], "ignore_unavailable": false, "include_global_state": false }, "retention": { "expire_after": "30d", "min_count": 5, "max_count": 20 } }' "localhost:9200/_slm/policy/daily-snapshots?pretty"
              # # Create index policy AKA ilm
              # curl -X PUT -H "Content-Type: application/json" -d '{ "policy": { "phases": { "hot": { "min_age": "0ms", "actions": { "rollover": { "max_primary_shard_size": "20gb", "max_age": "7d" } } }, "warm": { "min_age": "2d", "actions": { "shrink": { "number_of_shards": 1 }, "forcemerge": { "max_num_segments": 1 } } }, "delete": { "min_age": "7d", "actions": { "delete": { "delete_searchable_snapshot": true }, "wait_for_snapshot": { "policy": "daily-snapshots" } } } }, "_meta": { "managed": true, "description": "" } } }' "localhost:9200/_ilm/policy/daily-snapshots"
              # # Create index pattern
              # curl -X PUT -H "Content-Type: application/json" -d '{ "index_patterns": ["logstash-*"], "template": { "settings": { "index": { "lifecycle": { "name": "daily-snapshots", "rollover_alias": "logstash" }, "number_of_shards": 3, "number_of_replicas": "2" }, "index.routing.allocation.include._tier_preference": "data_cold,data_warm,data_hot" }, "mappings": { "dynamic": "true", "properties": {} }, "aliases": { "logstash": {} } }, "priority": 500, "data_stream": { }, "composed_of": [], "version": 1.0, "_meta": { "description": "logstash from fluent-bit", "managed": true } }' "localhost:9200/_index_template/logstash?pretty"
